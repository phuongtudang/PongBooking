const passport = require('passport');
const TwitterStrategy = require('passport-twitter').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users');

passport.serializeUser((user, done) => {
  done(null, user.id); //not the same id as profile.id, its the id generated by mongodb
});
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

passport.use(
  new TwitterStrategy({
    consumerKey     : keys.consumerKey,
    consumerSecret  : keys.consumerSecret,
    callbackURL: "/auth/twitter/callback"
  },
  async (token, tokenSecret, profile, done) => {
    const existingUser = await User.findOne({ 'twitterId' : profile.id });

    if (existingUser) {
      //meaning we already have a user with this given id
      done(null, existingUser);
    } else {
      //meaning we dont have a user with this given id, make a new user
      const user = await new User({
        twitterId: profile.id,
        twitterDisplayName: profile.displayName
       }).save();
      done(null, user);
    }
  }
));
